import pytest
from tests.test_resources.helper import get_search

@pytest.mark.smoke
@pytest.mark.parametrize("param_expected", [
    ({}, 1495),
    ({'q': 'C#'}, 16),
    ({'q': 'c-körkort'}, 5),
    ({'q': '.net'}, 17),
    ({'q': 'ci/cd'}, 8),
    ({'q': 'erp-system'}, 1),
    ({'q': 'tcp/ip'}, 2),
    ({'q': 'cad-verktyg'}, 1),
    ({'q': 'backend-utvecklare'}, 7),
    ({'q': 'it-tekniker'}, 9),
    ({'q': 'sjuksköterska'}, 126),
    ({'q': 'sjuksköterskor'}, 126),
    ({'q': 'körkort'}, 327),
    ({'q': 'distributör'}, 1),
    ({'q': 'livsmedel'}, 6),
    ({'q': 'sköterska'}, 3),
    ({'q': 'undersköterska'}, 41),
    ({'q': 'lärarutbildning'}, 4),
    ({'q': 'datasystem'}, 2),
    ({'q': 'undervisning'}, 54),
    ({'q': 'försäkring'}, 8),
    ({'q': 'barnmorska'}, 9),
    ({'q': 'tandsköterska'}, 6),
    ({'q': 'kock'}, 12),
    ({'q': 'stockholm'}, 299),
    ({'q': 'göteborg'}, 119),
    ({'q': 'malmö'}, 80),
    ({'q': 'uppsala'}, 38),
    ({'q': 'utvecklare'}, 49),
    ({'q': 'pizzabagare'}, 1),
    ({'q': 'personlig assistent'}, 51),
    ({'q': 'förskollärare'}, 22),
    ({'q': 'python'}, 23),
    ({'q': 'java'}, 22),
    ({'q': 'helsingborg'}, 28),
    ({'q': 'barnmorska tandsköterska'}, 15),
    ({'q': 'tandsköterska barnmorska'}, 15),
    ({'q': 'barnmorska fysioterapeut'}, 17),
    ({'q': 'chefsbarnmorska fysioterapeut'}, 9),
    ({'q': 'chefsbarnmorska barnmorska'}, 10),
    ({'q': 'developer engineer'}, 58),
    ({'q': 'python'}, 23),
    ({'q': 'java'}, 22),
    ({'q': 'java -javautvecklare'}, 20),
    ({'q': 'java python'}, 37),
    ({'q': 'java +python'}, 23),
    ({'q': 'java -python'}, 15),
    ({'q': 'kock -bagare'}, 12),
    ({'q': 'pizzabagare'}, 1),
    ({'q': 'bartender'}, 1),
    ({'q': 'personlig assistent'}, 51),
    ({'q': 'personlig assistent +göteborg'}, 6),
    ({'q': 'personlig assistent -göteborg'}, 45),
    ({'q': 'utvecklare'}, 49),
    ({'q': 'förskollärare'}, 22),
    ({'q': 'sjuksköterska'}, 126),
    ({'q': 'sjuksköterska -stockholm'}, 117),
    ({'municipality': ['AvNB_uwa_6n6', 'oYPt_yRA_Smm']}, 359),
    ({'municipality': 'AvNB_uwa_6n6'}, 285),
    ({'municipality': 'oYPt_yRA_Smm'}, 74),
    ({'municipality': 'PVZL_BQT_XtL'}, 117),
    ({'municipality': 'QiGt_BLu_amP'}, 21),
    ({'municipality': 'PVZL_BQT_XtL', 'region': 'CifL_Rzy_Mku'}, 527),
    ({'municipality': 'PVZL_BQT_XtL', 'region': 'CifL_Rzy_Mku', 'country': 'QJgN_Zge_BzJ'}, 531),
    ({'municipality': 'PVZL_BQT_XtL', 'region': 'CifL_Rzy_Mku', 'country': 'i46j_HmG_v64'}, 1485),
    ({'region': 'g5Tt_CAV_zBd'}, 34),
    ({'region': 'CaRE_1nn_cSU'}, 190),
    ({'region': 'CifL_Rzy_Mku'}, 410),
    ({'country': 'i46j_HmG_v64'}, 1485),
    ({'country': 'QJgN_Zge_BzJ'}, 4),
    ({'occupation-group': '7XXd_4St_nit'}, 9),
    ({'occupation-group': '5dxv_nVQ_N8o'}, 7),
    ({'occupation-group': 'BStc_SJh_DKG'}, 10),
    ({'occupation-group': 'Z8ci_bBE_tmx'}, 105),
    ({'occupation-field': 'VuuL_7CH_adj'}, 19),
    ({'occupation-field': 'ScKy_FHB_7wT'}, 21),
    ({'occupation-field': 'ASGV_zcE_bWf'}, 44),
    ({'occupation-field': '9puE_nYg_crq'}, 22),
    ({'q': 'lärare', 'published-after': '2019-01-16T07:29:52'}, 44),
    ({'q': 'lärare', 'published-after': '2020-12-06T07:29:52'}, 31),
    ({'q': 'Kundtjänstmedarbetare', 'sort': 'pubdate-asc'}, 21),
    ({'q': 'Kundtjänstmedarbetare', 'sort': 'pubdate-desc'}, 21),
    ({'q': 'lärare', 'published-after': '2019-01-16T07:29:52', 'country': 'i46j_HmG_v64', 'sort': 'pubdate-asc'}, 44),
    ({'q': 'lärare', 'region': ['CifL_Rzy_Mku', 'CaRE_1nn_cSU']}, 14),
    ({'q': 'lärare', 'region': 'CifL_Rzy_Mku'}, 11),
    ({'q': 'lärare', 'region': 'CaRE_1nn_cSU'}, 3),
    ({'q': 'lärare', 'municipality': '8deT_FRF_2SP'}, 1)
])
def test_count_and_print(session, param_expected):
    p = param_expected[0]
    expected = param_expected[1]
    p.update({'limit': '0'})
    number_of_hits = get_search(session, params=p)['total']['value']
    assert number_of_hits == expected, f"Expected {expected} but got {number_of_hits}"
