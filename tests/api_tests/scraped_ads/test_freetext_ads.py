import sys
import pytest
from tests.test_resources.scraped import get_scraped, check_ids, get_actual_ad_ids
from tests.test_resources.settings import NUMBER_OF_SCRAPED_ADS


@pytest.mark.smoke
@pytest.mark.integration
@pytest.mark.parametrize("query, expected_ids", [
    ('barnmorska', ['19801']),
    ('tandsköterska', []),
    ('kock', ['20301', '42301', '20401']),
    ('Sjuksköterskor',

     ['16401', '17301', '18101', '17601', '44701', '17901', '18701', '19301', '18901', '17501', '17401', '17701',
      '18001', '18201', '18301', '18401', '18501', '18601', '18801', '19001', '19501', '19801', '32301', '32801',
      '34001', '34401', '47001', '49401', '15601', '16701', '17201', '19201', '41301', '45101', '46101', '17801']
     ),
    ('Sjuksköterska',

     ['18301', '18501', '34001', '17401', '18001', '18201', '32301', '34401', '47001', '49401', '32801', '18601',
      '19001', '18801', '18401', '41401', '16401', '17301', '17601', '17701', '17901', '18101', '18701', '18901',
      '19301', '19501', '19801', '44701', '15601', '16701', '17201', '17501', '19201', '19101', '17801']
     ),

])
def test_freetext_query(session_scraped, scraped_url, query, expected_ids):
    print('==================', sys._getframe().f_code.co_name, '================== ')

    json_response = get_scraped(session_scraped, scraped_url, params={'q': query, 'limit': '100'})
    actual_ids = get_actual_ad_ids(json_response)
    check_ids(actual_ids, expected_ids)

    assert json_response['total']['value'] == len(expected_ids)
    assert len(json_response['hits']) == len(expected_ids)


@pytest.mark.smoke
@pytest.mark.integration
def test_no_freetext_query_total_value(session_scraped, scraped_url):
    print('==================', sys._getframe().f_code.co_name, '================== ')
    json_response = get_scraped(session_scraped, scraped_url, params={'limit': '0'})
    expected_number = NUMBER_OF_SCRAPED_ADS
    assert json_response['total']['value'] == expected_number


@pytest.mark.parametrize("query, expected_ids", [
    ('barnmorska tandsköterska', ['19801']),
    ('tandsköterska barnmorska', ['19801']),
    ('barnmorska', ['19801']),
    ('tandsköterska', []),
    ('lärare',
     ['10601', '43501', '5701', '7401', '9701', '10501', '43701', '6101', '36501', '31301', '7301', '42601', '47901',
      '10001', '33701', '42701', '7101', '42501', '9301', '7601', '9101', '9601', '10201', '10401', '13601', '43201',
      '43601', '43801', '8501', '43901', '6601', '7701', '7801', '8601', '9201', '9901', '10101', '47301', '10301',
      '10801', '47701', '9401', '42101', '46301', '48301', '7501', '40001', '45801', '10701', '9001', '38401']
     ),
    ('kock', ['20301', '42301', '20401']
     ),
    ('lärare kock',
     ['20301', '42301', '20401', '10601', '43501', '5701', '7401', '9701', '10501', '43701', '6101', '36501', '31301',
      '7301', '42601', '47901', '10001', '33701', '42701', '7101', '42501', '9301', '7601', '9101', '9601', '10201',
      '10401', '13601', '43201', '43601', '43801', '8501', '43901', '6601', '7701', '7801', '8601', '9201', '9901',
      '10101', '47301', '10301', '10801', '47701', '9401', '42101', '46301', '48301', '7501', '40001', '45801', '10701',
      '9001', '38401']),
    ('engineer', ['30501', '2201', '2001', '50501', '38101']),
    ('developer', ['40701', '24501', '31201']),
    ('developer engineer', ['30501', '2201', '2001', '50501', '38101', '40701', '24501', '31201']),
    ('engineer developer', ['30501', '2201', '2001', '50501', '38101', '40701', '24501', '31201']),
    ('engineer developer kock',
     ['30501', '2201', '2001', '50501', '38101', '40701', '24501', '31201', '20301', '42301', '20401']),
    ('Umeå', ['48601', '37601', '11301', '11501', '27201', '35601']),
    ('Sollentuna', ['7901']),
    ('Sollentuna Umeå', ['7901', '48601', '37601', '11301', '11501', '27201', '35601']),
    ('Sollentuna sjuksköterska',

     ['7901', '18301', '18501', '34001', '17401', '18001', '18201', '32301', '34401', '47001', '49401', '32801',
      '18601',
      '19001', '18801', '18401', '41401', '16401', '17301', '17601', '17701', '17901', '18101', '18701', '18901',
      '19301', '19501', '19801', '44701', '15601', '16701', '17201', '17501', '19201', '19101', '17801']
     ),  # zero hits
    ('sjuksköterskor',

     ['18301', '18501', '34001', '17401', '18001', '18201', '32301', '34401', '47001', '49401', '32801', '18601',
      '19001', '18801', '18401', '41401', '16401', '17301', '17601', '17701', '17901', '18101', '18701', '18901',
      '19301', '19501', '19801', '44701', '15601', '16701', '17201', '17501', '19201', '19101', '17801']

     ), ('sjuksköterska',

         ['16401', '17301', '18101', '17601', '44701', '17901', '18701', '19301', '18901', '17501', '17401', '17701',
          '18001', '18201', '18301', '18401', '18501', '18601', '18801', '19001', '19501', '19801', '32301', '32801',
          '34001', '34401', '47001', '49401', '15601', '16701', '17201', '19201', '41301', '45101', '46101', '17801']
         ),
    ('Uppsala',
     ['11601', '27401', '17901', '34701', '8901', '19601', '20701', '21101', '23601', '24701', '36801', '43401', '4701',
      '10601', '35901', '41301', '33501']
     ),
    ('sjuksköterskor Uppsala',
     ['16401', '17301', '18101', '17601', '44701', '17901', '18701', '19301', '18901', '17501', '17401', '17701',
      '18001', '18201', '18301', '18401', '18501', '18601', '18801', '19001', '19501', '19801', '32301', '32801',
      '34001', '34401', '47001', '49401', '15601', '16701', '17201', '19201', '41301', '45101', '46101', '17801',
      '11601', '27401', '17901', '34701', '8901', '19601', '20701', '21101', '23601', '24701', '36801', '43401', '4701',
      '10601', '35901', '41301', '33501']),

])
def test_freetext_query_multiple_search_terms(session_scraped, scraped_url, query, expected_ids):
    print('==================', sys._getframe().f_code.co_name, '================== ')
    json_response = get_scraped(session_scraped, scraped_url, params={'q': query, 'limit': '100'})
    actual_ids = get_actual_ad_ids(json_response)
    print(actual_ids)
    check_ids(actual_ids, expected_ids)

    assert json_response['total']['value'] == len(expected_ids)
    assert len(json_response['hits']) == len(expected_ids)


def test_plus_minus():
    pytest.fail("not implemented")
