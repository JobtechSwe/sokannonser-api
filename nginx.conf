worker_processes 4;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx/nginx.pid;

events { worker_connections 1024; }

http {
    include         mime.types;
    default_type    application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log          /var/log/nginx/access.log  main;
    sendfile            on;
    sendfile_max_chunk  1m;
    #Use the tcp_nopush directive together with the sendfile on; directive.
    #This enables NGINX to send HTTP response headers in one packet right after the chunk of data has been obtained by sendfile()
    tcp_nopush          on;
    charset             utf-8;
    keepalive_timeout   65;
    port_in_redirect    off;
    # don't send the nginx version number in error pages and Server header
    server_tokens       off;

    server {
        listen 8081;
        # token for loader.io
        location /loaderio-6b7df9ede7fa23c6a87eddb74d3bf406.txt {
           root /app;
        }
        location / {
            include uwsgi_params;
            uwsgi_pass unix:/tmp/uwsgi.sock;
            if ($request_method !~ ^(GET|HEAD|OPTIONS)$ ) {
                return 405;
            }

# read more here http://tautt.com/best-nginx-configuration-for-security/

# config to don't allow the browser to render the page inside an frame or iframe
# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
add_header X-Frame-Options SAMEORIGIN always;

# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-Content-Type-Options nosniff always;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block" always;

# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
# directives for css and js(if you have inline css or js, you will need to keep it too).
# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self'; style-src 'self'; font-src 'self'; frame-src none; object-src 'none'" always;

add_header Feature-Policy "geolocation none;midi none;notifications none;push none;sync-xhr none;microphone none;camera none;magnetometer none;gyroscope none;speaker self;vibrate none;fullscreen self;payment none;" always;
add_header Referrer-Policy "no-referrer" always;

        } # end of "location"
    } # end of "server2
} # end of "http"
